name: CI 

on:
  push:
    branches: feature
  pull_request:
    branches: main
  workflow_dispatch:

jobs:

  CheckCodeFormat:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run code style check 
        uses: dbelyaev/action-checkstyle@master
        with:
          github_token: ${{ secrets.github_token }}
          checkstyle_config: app/checkstyle.xml
          reporter: github-check
          level: error
          workdir: app/src/main
          
  EditorConfigCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install editorconfig-checker
        run: pip install editorconfig-checker

      - name: Start checking
        run: ec

  MarkdownFilesCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install mardownlint
        run: npm install -g markdownlint-cli

      - name: Run markdownlint test
        run: markdownlint **/*.md

  HardcodedSecretsCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  BuildAppWithGradle:
    runs-on: ubuntu-latest
    needs: ["CheckCodeFormat", "EditorConfigCheck", "MarkdownFilesCheck", "HardcodedSecretsCheck"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up java
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      
      - name: Run build with Gradle Wrapper
        run: chmod a+x app/gradlew && app/gradlew -x test -p app build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: code
          path: .

  SAST:
    runs-on: ubuntu-latest
    needs: ["BuildAppWithGradle"]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 

  SnykTest:
    runs-on: ubuntu-latest
    needs: ["BuildAppWithGradle"]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .
          
      - name: Run Snyk to check for vulnerabilities
        run: |
          npm install -g snyk
          snyk auth ${{secrets.SNYK_TOKEN}}
          chmod a+x app/gradlew
          app/gradlew -p app snyk-test
        
  UnitTests:
    runs-on: ubuntu-latest
    container: gradle:8.5.0-jdk17
    needs: ["BuildAppWithGradle"]
    steps:       
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .
          
      - name: Test with Gradle
        env: 
          API_KEY: "${{secrets.API_KEY}}"
        run: chmod a+x app/gradlew && app/gradlew -x build -p app test --tests "*"

  TrivyScanServerImage:
    runs-on: ubuntu-latest
    needs: ["UnitTests", "SnykTest", "SAST"]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Build an image
        run: docker build -t "cryptowallet:${{github.sha}}" -f ServerDockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cryptowallet:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

  TrivyScanClientImage:
    runs-on: ubuntu-latest
    needs: ["UnitTests", "SnykTest", "SAST"]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Build an image
        run: docker build -t "cryptowallet:${{github.sha}}" -f ClientDockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cryptowallet:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

  BuildAndPushImages:
    runs-on: ubuntu-latest
    needs: ["TrivyScanServerImage", "TrivyScanClientImage"]   
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build server image
        run: docker build -t "server:${{ github.sha }}" -f ServerDockerfile .
          
      - name: Tag server image
        run: docker tag server:${{ github.sha }} nikolaykostandiev/crypto_server:${{ github.sha }}

      - name: Push server image to DockerHub
        run: docker push nikolaykostandiev/crypto_server:${{ github.sha }}

      - name: Build client image
        run: docker build -t "client:${{ github.sha }}" -f ClientDockerfile .
          
      - name: Tag client image
        run: docker tag client:${{ github.sha }} nikolaykostandiev/crypto_client:${{ github.sha }}

      - name: Push client image to DockerHub
        run: docker push nikolaykostandiev/crypto_client:${{ github.sha }}
